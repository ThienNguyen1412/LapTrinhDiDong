import 'package:flutter/material.dart';
import '../../models/doctor.dart'; // Ch·ª©a model Doctor
import '../home/home_screen.dart'; // Ch·ª©a DoctorCard

// üí• CHUY·ªÇN TH√ÄNH STATEFUL WIDGET ƒê·ªÇ QU·∫¢N L√ù TR·∫†NG TH√ÅI L·ªåC
class BookNewAppointmentScreen extends StatefulWidget {
  final void Function(Doctor) onBookAppointment; 

  BookNewAppointmentScreen({ // KH√îNG C√ì 'const'
    super.key,
    required this.onBookAppointment,
  });

  @override
  State<BookNewAppointmentScreen> createState() => _BookNewAppointmentScreenState();
}

class _BookNewAppointmentScreenState extends State<BookNewAppointmentScreen> {
  
  final List<Doctor> allDoctors = Doctor.getDoctors();
  String? _selectedSpecialty; // Tr·∫°ng th√°i l·ªçc


  // H√†m thay ƒë·ªïi tr·∫°ng th√°i l·ªçc
  void _selectSpecialty(String specialty) {
    setState(() {
      // N·∫øu nh·∫•n l·∫°i chuy√™n khoa ƒë√£ ch·ªçn, h·ªßy ch·ªçn (hi·ªÉn th·ªã t·∫•t c·∫£)
      _selectedSpecialty = (_selectedSpecialty == specialty) ? null : specialty;
    });
  }
  
  // H√†m l·ªçc danh s√°ch b√°c sƒ©
  List<Doctor> get _filteredDoctors {
    if (_selectedSpecialty == null) {
      return allDoctors; // N·∫øu kh√¥ng l·ªçc, hi·ªÉn th·ªã T·∫§T C·∫¢ b√°c sƒ©
    }
    // L·ªçc theo chuy√™n khoa
    return allDoctors
        .where((doctor) => doctor.specialty == _selectedSpecialty)
        .toList();
  }

  // üí• DANH S√ÅCH CHUY√äN KHOA ƒê√É M·ªû R·ªòNG
  final List<Map<String, dynamic>> categories = const [
    {'name': 'Nhi khoa', 'icon': Icons.child_care},
    {'name': 'M·∫Øt', 'icon': Icons.remove_red_eye},
    {'name': 'Tai M≈©i H·ªçng', 'icon': Icons.hearing},
    {'name': 'Da Li·ªÖu', 'icon': Icons.self_improvement},
    {'name': 'Tim m·∫°ch', 'icon': Icons.favorite},
    {'name': 'Th·∫ßn kinh', 'icon': Icons.psychology},
    {'name': 'C∆° x∆∞∆°ng kh·ªõp', 'icon': Icons.accessible_forward},
    {'name': 'H√¥ h·∫•p', 'icon': Icons.air},
    {'name': 'N·ªôi ti·∫øt', 'icon': Icons.medical_services},
    {'name': 'S·∫£n ph·ª• khoa', 'icon': Icons.pregnant_woman},
  ];

  // üí• WIDGET CATEGORY M·ªöI: D√ôNG GRID VIEW V·ªöI GI·ªöI H·∫†N CHI·ªÄU CAO V√Ä CU·ªòN RI√äNG
  Widget _buildCategoryGrid() {
    // Chi·ªÅu cao c·ªë ƒë·ªãnh cho 2 h√†ng (2 * 90px cao c·ªßa m·ªói item)
    const double itemHeight = 90.0;
    const double spacing = 10.0;
    const double fixedHeight = (2 * itemHeight) + spacing; // Kho·∫£ng 190.0

    return SizedBox(
      height: fixedHeight, // üí• GI·ªöI H·∫†N CHI·ªÄU CAO CHO 2 H√ÄNG
      child: GridView.builder(
        // üí• B·∫¨T T√çNH NƒÇNG CU·ªòN N·ªòI B·ªò 
        physics: const BouncingScrollPhysics(),
        
        itemCount: categories.length, 
        
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 4, 
          childAspectRatio: 0.85, 
          crossAxisSpacing: spacing,
          mainAxisSpacing: spacing,
        ),
        itemBuilder: (context, index) {
          final category = categories[index];
          final categoryName = category['name'] as String;
          final isSelected = _selectedSpecialty == categoryName;
          
          return GestureDetector(
            onTap: () => _selectSpecialty(categoryName), // G·ªçi h√†m l·ªçc
            child: Column(
              children: [
                CircleAvatar(
                  radius: 28,
                  backgroundColor: isSelected ? Colors.blue : Colors.blue[50],
                  child: Icon(
                    category['icon'] as IconData, 
                    color: isSelected ? Colors.white : Colors.blue, 
                    size: 28
                  ),
                ),
                const SizedBox(height: 5),
                Expanded(
                  child: Text(
                    categoryName,
                    style: TextStyle(
                      fontSize: 12,
                      fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 2, 
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Ch·ªçn B√°c sƒ© ƒë·ªÉ ƒê·∫∑t l·ªãch'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // --- M·ª§C CHUY√äN KHOA PH·ªî BI·∫æN ---
            const Text(
              'Ch·ªçn Chuy√™n khoa',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            _buildCategoryGrid(), // üí• S·ª¨ D·ª§NG GRID VIEW M·ªöI
            const SizedBox(height: 25),
            // --------------------------------------------------

            Padding(
              padding: const EdgeInsets.only(bottom: 15),
              child: Text(
                _selectedSpecialty == null 
                  ? 'Danh s√°ch t·∫•t c·∫£ c√°c B√°c sƒ©:'
                  : 'K·∫øt qu·∫£ l·ªçc cho: ${_selectedSpecialty}',
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),

            // T√°i s·ª≠ d·ª•ng DoctorCard v·ªõi danh s√°ch ƒë√£ l·ªçc
            ..._filteredDoctors.map((doctor) => Padding(
                  padding: const EdgeInsets.only(bottom: 15),
                  child: DoctorCard(
                    doctor: doctor,
                    // Truy·ªÅn callback ƒë·ªÉ ƒë·∫∑t l·ªãch
                    onBookAppointment: widget.onBookAppointment, 
                  ),
                )),
                
            if (_filteredDoctors.isEmpty)
              const Center(
                child: Text('Kh√¥ng t√¨m th·∫•y b√°c sƒ© n√†o thu·ªôc chuy√™n khoa n√†y.'),
              ),
          ],
        ),
      ),
    );
  }
  
  // X√≥a h√†m _buildCategoryList() c≈©.
}