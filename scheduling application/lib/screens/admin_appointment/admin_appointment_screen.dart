import 'package:flutter/material.dart';
import '../../models/appointment.dart'; // ƒê·∫£m b·∫£o model Appointment ƒë∆∞·ª£c import

/// M√†n h√¨nh qu·∫£n l√Ω c√°c l·ªãch h·∫πn (d√†nh cho Admin)
class AdminAppointmentScreen extends StatefulWidget {
  final List<Appointment> pendingAppointments;
  final Function(String id, String newStatus) updateAppointmentStatus;

  const AdminAppointmentScreen({
    super.key,
    required this.pendingAppointments,
    required this.updateAppointmentStatus,
  });

  @override
  State<AdminAppointmentScreen> createState() => _AdminAppointmentScreenState();
}

class _AdminAppointmentScreenState extends State<AdminAppointmentScreen> {
  // L·ªçc l·ªãch h·∫πn theo tr·∫°ng th√°i (ch·ªâ Pending)
  List<Appointment> get _pendingAppointments {
    return widget.pendingAppointments
        .where((app) => app.status == 'Pending')
        .toList();
  }

  // H√†m x√°c nh·∫≠n l·ªãch h·∫πn
  void _confirmAppointment(String id) {
    widget.updateAppointmentStatus(id, 'Confirmed');
  }

  // H√†m h·ªßy l·ªãch h·∫πn
  void _cancelAppointment(String id) {
    widget.updateAppointmentStatus(id, 'Canceled');
  }

  // Widget x√¢y d·ª±ng Card hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·∫πn
  Widget _buildAppointmentCard(Appointment app, BuildContext context) {
    // üí• KH·∫ÆC PH·ª§C L·ªñI: Truy c·∫≠p tr·ª±c ti·∫øp c√°c thu·ªôc t√≠nh c·ªßa Appointment
    // Thay v√¨ app.bookingDetails.X hay app.doctor.X
    
    return Card(
      margin: const EdgeInsets.only(bottom: 15),
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // D√≤ng 1: Ti√™u ƒë·ªÅ - Th√¥ng tin chung
            const Text(
              'Y√™u c·∫ßu ƒê·∫∑t l·ªãch kh√°m m·ªõi',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Color(0xFF0D47A1)),
            ),
            const Divider(),

            // D√≤ng 2: Th√¥ng tin B√°c sƒ©
            Row(
              children: [
                const Icon(Icons.person, size: 18, color: Colors.blue),
                const SizedBox(width: 8),
                Text(
                  // üí• ƒê√£ s·ª≠a l·ªói: S·ª≠ d·ª•ng app.doctorName v√† app.specialty
                  'BS: ${app.doctorName} (${app.specialty})', 
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
              ],
            ),
            const SizedBox(height: 8),

            // D√≤ng 3: Th·ªùi gian
            Row(
              children: [
                const Icon(Icons.calendar_today, size: 18, color: Colors.blue),
                const SizedBox(width: 8),
                Text(
                  // üí• ƒê√£ s·ª≠a l·ªói: S·ª≠ d·ª•ng app.date v√† app.time
                  'Th·ªùi gian: ${app.date} l√∫c ${app.time}',
                  style: const TextStyle(fontSize: 16),
                ),
              ],
            ),
            const SizedBox(height: 8),

            // D√≤ng 4: ID/Tr·∫°ng th√°i
            Row(
              children: [
                const Icon(Icons.vpn_key, size: 18, color: Colors.grey),
                const SizedBox(width: 8),
                Text('ID: ${app.id} | Tr·∫°ng th√°i: ${app.status}', style: const TextStyle(fontSize: 14, color: Colors.grey)),
              ],
            ),
            // D√≤ng 5 (Gi·∫£ ƒë·ªãnh th√¥ng tin B·ªánh nh√¢n/ƒê·ªãa ch·ªâ n·∫øu c√≥)
            const SizedBox(height: 10),
            
            const Divider(),

            // Khu v·ª±c n√∫t b·∫•m Admin
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                // N√∫t H·ªßy
                OutlinedButton(
                  onPressed: app.status != 'Pending' ? null : () => _cancelAppointment(app.id),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.red,
                    side: const BorderSide(color: Colors.red),
                  ),
                  child: const Text('H·ªßy'),
                ),
                const SizedBox(width: 10),
                // N√∫t X√°c nh·∫≠n
                ElevatedButton(
                  onPressed: app.status != 'Pending' ? null : () => _confirmAppointment(app.id),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('X√°c nh·∫≠n'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(

      body: _pendingAppointments.isEmpty
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.check_circle_outline, size: 60, color: Colors.green),
                  SizedBox(height: 10),
                  Text(
                    'üéâ Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ƒëang ch·ªù x·ª≠ l√Ω.',
                    style: TextStyle(fontSize: 16, color: Colors.grey),
                  ),
                ],
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(16.0),
              itemCount: _pendingAppointments.length,
              itemBuilder: (context, index) {
                final appointment = _pendingAppointments[index];
                return _buildAppointmentCard(appointment, context);
              },
            ),
    );
  }
}