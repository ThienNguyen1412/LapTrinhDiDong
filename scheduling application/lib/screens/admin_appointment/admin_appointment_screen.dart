// File: screens/admin/admin_appointment/admin_appointment_screen.dart

import 'package:flutter/material.dart';
// ‚ú® S·ª¨A L·ªñI: Import model v√† s·ª≠ d·ª•ng b√≠ danh 'model' ƒë·ªÉ tr√°nh xung ƒë·ªôt
import '../../../models/appointment.dart' as model; 

/// M√†n h√¨nh qu·∫£n l√Ω c√°c l·ªãch h·∫πn (d√†nh cho Admin)
class AdminAppointmentScreen extends StatefulWidget {
  // ‚ú® C·∫¢I TI·∫æN: ƒê·ªïi t√™n tham s·ªë cho ch√≠nh x√°c, v√¨ n√≥ ch·ª©a t·∫•t c·∫£ l·ªãch h·∫πn
  final List<model.Appointment> appointments; 
  final Function(String id, String newStatus) updateAppointmentStatus;

  const AdminAppointmentScreen({
    super.key,
    required this.appointments,
    required this.updateAppointmentStatus,
  });

  @override
  State<AdminAppointmentScreen> createState() => _AdminAppointmentScreenState();
}

class _AdminAppointmentScreenState extends State<AdminAppointmentScreen> {

  // ‚ú® C·∫¢I TI·∫æN: T√°ch th√†nh c√°c h√†m l·ªçc ri√™ng bi·ªát cho m·ªói tab
  List<model.Appointment> _filterAppointmentsByStatus(String status) {
    return widget.appointments.where((app) => app.status == status).toList();
  }

  // Widget x√¢y d·ª±ng Card hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·∫πn
  Widget _buildAppointmentCard(model.Appointment app) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Th√¥ng tin b·ªánh nh√¢n
            _buildInfoRow(Icons.badge_outlined, 'B·ªánh nh√¢n:', '${app.patientName} - ${app.patientPhone}'),
            const SizedBox(height: 8),

            // Th√¥ng tin B√°c sƒ©
            _buildInfoRow(Icons.medical_services_outlined, 'B√°c sƒ©:', '${app.doctorName} (${app.specialty})'),
            const SizedBox(height: 8),

            // Th·ªùi gian
            _buildInfoRow(Icons.calendar_today_outlined, 'Th·ªùi gian:', '${app.date} l√∫c ${app.time}'),
            
            // Ch·ªâ hi·ªÉn th·ªã n√∫t n·∫øu l·ªãch h·∫πn ƒëang ch·ªù x·ª≠ l√Ω
            if (app.status == 'Pending') ...[
              const Divider(height: 24),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  OutlinedButton.icon(
                    icon: const Icon(Icons.cancel_outlined),
                    label: const Text('H·ªßy'),
                    onPressed: () => widget.updateAppointmentStatus(app.id, 'Canceled'),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red,
                      side: const BorderSide(color: Colors.red),
                    ),
                  ),
                  const SizedBox(width: 10),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.check_circle_outline),
                    label: const Text('X√°c nh·∫≠n'),
                    onPressed: () => widget.updateAppointmentStatus(app.id, 'Confirmed'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ],
              ),
            ]
          ],
        ),
      ),
    );
  }

  // Widget helper ƒë·ªÉ t·∫°o c√°c d√≤ng th√¥ng tin cho ƒë·ªìng b·ªô
  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(icon, size: 20, color: Colors.blue.shade700),
        const SizedBox(width: 12),
        Expanded(
          child: RichText(
            text: TextSpan(
              style: const TextStyle(fontSize: 15, color: Colors.black87, fontFamily: 'Roboto'),
              children: [
                TextSpan(text: '$label ', style: const TextStyle(fontWeight: FontWeight.bold)),
                TextSpan(text: value),
              ],
            ),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    // ‚ú® C·∫¢I TI·∫æN: Giao di·ªán s·ª≠ d·ª•ng TabController
    return DefaultTabController(
      length: 3, // S·ªë l∆∞·ª£ng tab
      child: Scaffold(
        // AppBar ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi AdminHomeScreen, ·ªü ƒë√¢y ch·ªâ c·∫ßn TabBar
        appBar: TabBar(
          labelColor: Colors.red.shade700,
          unselectedLabelColor: Colors.grey,
          indicatorColor: Colors.red.shade700,
          tabs: const [
            Tab(text: 'Ch·ªù x·ª≠ l√Ω'),
            Tab(text: 'ƒê√£ x√°c nh·∫≠n'),
            Tab(text: 'ƒê√£ h·ªßy'),
          ],
        ),
        body: TabBarView(
          children: [
            // Tab 1: L·ªãch h·∫πn ch·ªù x·ª≠ l√Ω
            _AppointmentListView(
              appointments: _filterAppointmentsByStatus('Pending'),
              emptyMessage: 'üéâ Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ƒëang ch·ªù x·ª≠ l√Ω.',
              buildCard: _buildAppointmentCard,
            ),
            // Tab 2: L·ªãch h·∫πn ƒë√£ x√°c nh·∫≠n
            _AppointmentListView(
              appointments: _filterAppointmentsByStatus('Confirmed'),
              emptyMessage: 'Ch∆∞a c√≥ l·ªãch h·∫πn n√†o ƒë∆∞·ª£c x√°c nh·∫≠n.',
              buildCard: _buildAppointmentCard,
            ),
            // Tab 3: L·ªãch h·∫πn ƒë√£ h·ªßy
            _AppointmentListView(
              appointments: _filterAppointmentsByStatus('Canceled'),
              emptyMessage: 'Kh√¥ng c√≥ l·ªãch h·∫πn n√†o b·ªã h·ªßy.',
              buildCard: _buildAppointmentCard,
            ),
          ],
        ),
      ),
    );
  }
}

// ‚ú® C·∫¢I TI·∫æN: Widget con ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch, c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng
class _AppointmentListView extends StatelessWidget {
  final List<model.Appointment> appointments;
  final String emptyMessage;
  final Widget Function(model.Appointment) buildCard;

  const _AppointmentListView({
    required this.appointments,
    required this.emptyMessage,
    required this.buildCard,
  });

  @override
  Widget build(BuildContext context) {
    if (appointments.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.inbox_outlined, size: 60, color: Colors.grey.shade400),
            const SizedBox(height: 16),
            Text(emptyMessage, style: const TextStyle(fontSize: 16, color: Colors.grey)),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16.0),
      itemCount: appointments.length,
      itemBuilder: (context, index) {
        return buildCard(appointments[index]);
      },
    );
  }
}