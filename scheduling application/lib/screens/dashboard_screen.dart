import 'package:flutter/material.dart';
import 'home_screen.dart';
import 'profile_screen.dart';
import '../models/campus.dart';
import 'news_screen.dart';
// ‚ö†Ô∏è ƒê·∫£m b·∫£o file appointment_screen.dart ch·ª©a c·∫£ class Appointment MODEL
import 'appointment_screen.dart'; 
// Th√™m import cho model Doctor n·∫øu c·∫ßn (Gi·∫£ ƒë·ªãnh n·∫±m trong ../models/campus.dart)
// import '../models/campus.dart'; 

// --- M√†n h√¨nh gi·∫£ (Placeholder Screens) ---

class NotificationScreen extends StatelessWidget {
  const NotificationScreen({super.key});
  @override
  Widget build(BuildContext context) {
    return const Center(child: Text('N·ªôi dung M√†n h√¨nh Th√¥ng b√°o'));
  }
}

// ------------------------------------------

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  int _selectedIndex = 0;
  int _nextAppointmentId = 2; // D√πng ƒë·ªÉ t·∫°o ID duy nh·∫•t

  // üí• QU·∫¢N L√ù TR·∫†NG TH√ÅI L·ªäCH H·∫∏N
  List<Appointment> _appointments = [
    Appointment(
      id: 'appt1',
      doctorName: 'B√°c sƒ© Minh', 
      specialty: 'Nhi khoa', 
      date: '10/11/2025', 
      time: '14:30 PM', 
      status: 'upcoming'
    ),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // üí• H√ÄM TH√äM L·ªäCH H·∫∏N (d√πng cho DetailsScreen)
  void _addAppointment(Doctor doctor) {
    final newAppointment = Appointment(
      id: 'appt${_nextAppointmentId++}',
      doctorName: doctor.name,
      specialty: doctor.specialty,
      date: '25/11/2025', // Ng√†y/Gi·ªù gi·∫£ ƒë·ªãnh
      time: '10:00 AM',
      status: 'upcoming',
    );
    
    setState(() {
      _appointments.add(newAppointment);
    });

    // Chuy·ªÉn sang tab L·ªãch h·∫πn (Index 1) v√† hi·ªÉn th·ªã th√¥ng b√°o
    _onItemTapped(1); 
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v·ªõi ${doctor.name} v√†o 25/11/2025')),
    );
  }

  // üí• H√ÄM X√ìA L·ªäCH H·∫∏N (d√πng cho AppointmentScreen)
  void _deleteAppointment(Appointment appt) {
    setState(() {
      _appointments.removeWhere((a) => a.id == appt.id);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ h·ªßy l·ªãch h·∫πn v·ªõi ${appt.doctorName}')),
    );
  }

  // üí• H√ÄM S·ª¨A L·ªäCH H·∫∏N (ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o, c·∫ßn logic s·ª≠a th·ª±c t·∫ø)
  void _editAppointment(Appointment appt) {
    // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω m·ªü m·ªôt dialog ho·∫∑c chuy·ªÉn ƒë·∫øn trang Edit Appointment
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('M·ªü form s·ª≠a l·ªãch h·∫πn: ${appt.doctorName}')),
    );
  }

  @override
  Widget build(BuildContext context) {
    // üí• C·∫¨P NH·∫¨T DANH S√ÅCH M√ÄN H√åNH ƒê·ªÇ TRUY·ªÄN CALLBACKS V√Ä DATA
    final List<Widget> _screens = <Widget>[
      // HomeScreen ph·∫£i c√≥ kh·∫£ nƒÉng ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn DetailsScreen v√† truy·ªÅn _addAppointment
      HomeScreen(onBookAppointment: _addAppointment), 
      
      // AppointmentScreen nh·∫≠n data v√† callbacks
      AppointmentScreen(
        appointments: _appointments,
        onDelete: _deleteAppointment,
        onEdit: _editAppointment,
        onBookAppointment: _addAppointment,
      ),
      NewsScreen(),
      const NotificationScreen(),
      ProfileScreen(),
    ];
    
    return Scaffold(
      body: _screens[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed, 
        selectedItemColor: Colors.blue, 
        unselectedItemColor: Colors.grey,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Trang ch·ªß'),
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'L·ªãch h·∫πn'),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'),
          BottomNavigationBarItem(icon: Icon(Icons.notifications), label: 'Th√¥ng b√°o'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'H·ªì s∆°'),
        ],
      ),
    );
  }
}