import 'package:flutter/material.dart';
import 'home/home_screen.dart';
import 'profile/profile_screen.dart';
import '../models/campus.dart'; // Ch·ª©a model Doctor
import '../models/notification.dart'; // Import model AppNotification
import 'news/news_screen.dart';
// ‚ö†Ô∏è ƒê·∫£m b·∫£o file appointment_screen.dart ch·ª©a c·∫£ class Appointment MODEL
import 'appointment/appointment_screen.dart'; 
// Import NotificationScreen ƒë√£ ƒë∆∞·ª£c thi·∫øt k·∫ø
import 'notification/notification_screen.dart'; 

// ------------------------------------------

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  int _selectedIndex = 0;
  int _nextAppointmentId = 2; 

  // üí• 1. QU·∫¢N L√ù TR·∫†NG TH√ÅI L·ªäCH H·∫∏N
  List<Appointment> _appointments = [
    Appointment(
      id: 'appt1',
      doctorName: 'B√°c sƒ© Minh', 
      specialty: 'Nhi khoa', 
      date: '10/11/2025', 
      time: '14:30 PM', 
      status: 'upcoming'
    ),
  ];
  
  // üí• 2. QU·∫¢N L√ù TR·∫†NG TH√ÅI TH√îNG B√ÅO
  List<AppNotification> _notifications = AppNotification.initialNotifications();

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // üí• 3. H√ÄM TH√äM TH√îNG B√ÅO (khi ƒë·∫∑t l·ªãch th√†nh c√¥ng)
  void _addNotificationForAppointment(Doctor doctor) {
    final newNotification = AppNotification(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: 'L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! üéâ',
      body: 'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi B√°c sƒ© ${doctor.name}, chuy√™n khoa ${doctor.specialty} v√†o ng√†y 25/11/2025. Vui l√≤ng ki·ªÉm tra m·ª•c L·ªãch h·∫πn.',
      date: DateTime.now(),
      isRead: false,
    );

    setState(() {
      _notifications.add(newNotification);
    });
    
    // G·ªçi h√†m th√™m l·ªãch h·∫πn g·ªëc
    _addAppointment(doctor); 
  }

  // üí• 4. H√ÄM G·ªêC TH√äM L·ªäCH H·∫∏N (ƒë√£ ƒë∆∞·ª£c t√°ch ra)
  void _addAppointment(Doctor doctor) {
    final newAppointment = Appointment(
      id: 'appt${_nextAppointmentId++}',
      doctorName: doctor.name,
      specialty: doctor.specialty,
      date: '25/11/2025', // Ng√†y/Gi·ªù gi·∫£ ƒë·ªãnh
      time: '10:00 AM',
      status: 'upcoming',
    );
    
    setState(() {
      _appointments.add(newAppointment);
    });

    // Chuy·ªÉn sang tab L·ªãch h·∫πn (Index 1)
    _onItemTapped(1); 
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v·ªõi ${doctor.name} v√†o 25/11/2025')),
    );
  }

  // üí• 5. H√ÄM ƒê√ÅNH D·∫§U TH√îNG B√ÅO ƒê√É ƒê·ªåC
  void _markNotificationAsRead(String id) {
    setState(() {
      final index = _notifications.indexWhere((noti) => noti.id == id);
      if (index >= 0 && !_notifications[index].isRead) {
        // C·∫≠p nh·∫≠t b·∫±ng c√°ch s·ª≠ d·ª•ng copyWith (ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong model)
        _notifications[index] = _notifications[index].copyWith(isRead: true);
      }
    });
  }
  
  // üí• 6. H√ÄM X√ìA V√Ä S·ª¨A L·ªäCH H·∫∏N (Gi·ªØ nguy√™n)
  void _deleteAppointment(Appointment appt) {
    setState(() {
      _appointments.removeWhere((a) => a.id == appt.id);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ h·ªßy l·ªãch h·∫πn v·ªõi ${appt.doctorName}')),
    );
  }

  void _editAppointment(Appointment appt) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('M·ªü form s·ª≠a l·ªãch h·∫πn: ${appt.doctorName}')),
    );
  }


  @override
  Widget build(BuildContext context) {
    
    final List<Widget> _screens = <Widget>[
      // HomeScreen g·ªçi h√†m th√™m th√¥ng b√°o khi ƒë·∫∑t l·ªãch
      HomeScreen(onBookAppointment: _addNotificationForAppointment), 
      
      // AppointmentScreen nh·∫≠n data v√† callbacks
      AppointmentScreen(
        appointments: _appointments,
        onDelete: _deleteAppointment,
        onEdit: _editAppointment,
        onBookAppointment: _addNotificationForAppointment, // V·∫´n d√πng h√†m th√™m th√¥ng b√°o
      ),
      NewsScreen(),
      
      // üí• NotificationScreen nh·∫≠n danh s√°ch v√† h√†m ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
      NotificationScreen(
        notifications: _notifications,
        markAsRead: _markNotificationAsRead,
      ),
      ProfileScreen(),
    ];
    
    return Scaffold(
      body: _screens[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed, 
        selectedItemColor: Colors.blue, 
        unselectedItemColor: Colors.grey,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Trang ch·ªß'),
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'L·ªãch h·∫πn'),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'),
          BottomNavigationBarItem(icon: Icon(Icons.notifications), label: 'Th√¥ng b√°o'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'H·ªì s∆°'),
        ],
      ),
    );
  }
}