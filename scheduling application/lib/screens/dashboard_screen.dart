import 'package:flutter/material.dart';
import 'package:scheduling_application/models/user.dart';
import 'home/home_screen.dart';
import 'profile/profile_screen.dart';
import '../models/doctor.dart';
import '../models/notification.dart';
import 'news/news_screen.dart';
import 'appointment/appointment_screen.dart';
import 'service/service_screen.dart';

// ‚ú® S·ª¨A L·ªñI: S·ª≠ d·ª•ng 'as model' ƒë·ªÉ tr√°nh xung ƒë·ªôt t√™n Appointment
import '../models/appointment.dart' as model;
import 'notification/notification_screen.dart';
import 'service/service_screen.dart';

class DashboardScreen extends StatefulWidget {
  final User user;
  const DashboardScreen({Key? key, required this.user}) : super(key: key);

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  int _selectedIndex = 0;
  int _nextAppointmentId = 2;

  // ‚ú® S·ª¨A L·ªñI: S·ª≠ d·ª•ng ki·ªÉu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh danh r√µ r√†ng
  final List<model.Appointment> _appointments = [];

  final List<AppNotification> _notifications = AppNotification.initialNotifications();
  // Qu·∫£n l√Ω tr·∫°ng th√°i l·ªãch h·∫πn
  List<Appointment> _appointments = [
    Appointment(
      id: 'appt1',
      doctorName: 'B√°c sƒ© Minh',
      specialty: 'Nhi khoa',
      date: '10/11/2025',
      time: '14:30 PM',
      status: 'upcoming',
    ),
  ];

  // Qu·∫£n l√Ω tr·∫°ng th√°i th√¥ng b√°o
  List<AppNotification> _notifications = AppNotification.initialNotifications();

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  void _markNotificationAsRead(String id) {
  // H√†m th√™m th√¥ng b√°o khi ƒë·∫∑t l·ªãch th√†nh c√¥ng
  void _addNotificationForAppointment(Doctor doctor) {
    final newNotification = AppNotification(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: 'L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! üéâ',
      body: 'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi B√°c sƒ© ${doctor.name}, chuy√™n khoa ${doctor.specialty} v√†o ng√†y 25/11/2025. Vui l√≤ng ki·ªÉm tra m·ª•c L·ªãch h·∫πn.',
      date: DateTime.now(),
      isRead: false,
    );

    setState(() {
      _notifications.add(newNotification);
    });

    _addAppointment(doctor);
  }

  void _addNotification(AppNotification notification) {
    setState(() {
      _notifications.add(notification);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('üîî Th√¥ng b√°o m·ªõi: ${notification.title}')),
    );
  }

  // H√†m th√™m l·ªãch h·∫πn (v·∫´n c·∫ßn cho c√°c m√†n h√¨nh kh√°c)
  // H√†m g·ªëc th√™m l·ªãch h·∫πn
  void _addAppointment(Doctor doctor) {
    final newAppointment = model.Appointment(
      id: 'appt${_nextAppointmentId++}',
      doctorName: doctor.name,
      specialty: doctor.specialty,
      date: '25/11/2025',
      time: '10:00 AM',
      status: 'upcoming',
    );

    setState(() {
      _appointments.add(newAppointment);
    });
  }

  // H√†m th√™m th√¥ng b√°o v√† l·ªãch h·∫πn (v·∫´n c·∫ßn cho c√°c m√†n h√¨nh kh√°c)
  void _addNotificationForAppointment(Doctor doctor) {
    final newNotification = AppNotification(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: 'L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! üéâ',
      body: 'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi BS ${doctor.name} v√†o ng√†y 25/11/2025.',
      date: DateTime.now(),
      isRead: false,
    );


    _onItemTapped(1);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          '‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v·ªõi ${doctor.name} v√†o 25/11/2025',
        ),
      ),
    );
  }

  // H√†m ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  void _markNotificationAsRead(String id) {
    setState(() {
      final index = _notifications.indexWhere((noti) => noti.id == id);
      if (index >= 0 && !_notifications[index].isRead) {
        _notifications[index] = _notifications[index].copyWith(isRead: true);
      }
    });

    _addAppointment(doctor);
    
    _onItemTapped(1); // Chuy·ªÉn sang tab L·ªãch h·∫πn
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v·ªõi ${doctor.name}')),
    );
  }

  void _deleteAppointment(model.Appointment appt) {
  }

  // H√†m x√≥a v√† s·ª≠a l·ªãch h·∫πn
  void _deleteAppointment(Appointment appt) {
    setState(() {
      _appointments.removeWhere((a) => a.id == appt.id);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ h·ªßy l·ªãch h·∫πn v·ªõi ${appt.doctorName}')),
    );
  }

  void _editAppointment(model.Appointment appt) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('M·ªü form s·ª≠a l·ªãch h·∫πn: ${appt.doctorName}')),
    );
  }

  @override
  Widget build(BuildContext context) {
    // Danh s√°ch c√°c m√†n h√¨nh
    final List<Widget> screens = <Widget>[
      // 0. Trang Ch·ªß 
      // ‚ú® C·∫¨P NH·∫¨T: X√≥a c√°c tham s·ªë kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi HomeScreen m·ªõi
      HomeScreen(
        notifications: _notifications,
        markNotificationAsRead: _markNotificationAsRead,
        onBookAppointment: _addNotificationForAppointment,
      ),

    final List<Widget> _screens = <Widget>[
      // 0. Trang ch·ªß
      HomeScreen(
        user: widget.user,
        onBookAppointment: _addNotificationForAppointment,
      ),
      // 1. L·ªãch h·∫πn
      AppointmentScreen(
        appointments: _appointments,
        onDelete: _deleteAppointment,
        onEdit: _editAppointment,
        onBookAppointment: _addNotificationForAppointment,
      ),

      // 2. D·ªãch v·ª•
      ServiceScreen(
        onBookAppointment: _addNotificationForAppointment,
        unreadNotifications: _notifications,
        markNotificationAsRead: _markNotificationAsRead,
        addNotification: _addNotification,
      ),
      // 3. Tin t·ª©c
      const NewsScreen(),

      // 4. H·ªì s∆°
      const ProfileScreen(),
      NewsScreen(),
      // 4. Th√¥ng b√°o
      NotificationScreen(
        notifications: _notifications,
        markAsRead: _markNotificationAsRead,
      ),
      // 5. H·ªì s∆°
      ProfileScreen(user: widget.user),
    ];

    return Scaffold(
      body: screens[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.blue.shade800,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Trang ch·ªß'),
          BottomNavigationBarItem(
              icon: Icon(Icons.calendar_today), label: 'L·ªãch h·∫πn'),
          BottomNavigationBarItem(
              icon: Icon(Icons.medical_services), label: 'D·ªãch v·ª•'),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'),
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'L·ªãch h·∫πn'),
          BottomNavigationBarItem(icon: Icon(Icons.medical_services), label: 'D·ªãch v·ª•'),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'),
          BottomNavigationBarItem(icon: Icon(Icons.notifications), label: 'Th√¥ng b√°o'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'H·ªì s∆°'),
        ],
      ),
    );
  }
}