// File: dashboard_screen.dart

import 'package:flutter/material.dart';
import 'package:scheduling_application/models/user.dart';
import 'home/home_screen.dart';
import 'home/home_screen.dart'; // Trang ch·ªß (Index 0)
import 'profile/profile_screen.dart';
import '../models/doctor.dart'; // Ch·ª©a model Doctor
import '../models/notification.dart'; 
import 'news/news_screen.dart';
// ‚ö†Ô∏è ƒê·∫£m b·∫£o file appointment_screen.dart ch·ª©a c·∫£ class Appointment MODEL
import 'appointment/appointment_screen.dart';
// Import NotificationScreen ƒë√£ ƒë∆∞·ª£c thi·∫øt k·∫ø
import 'notification/notification_screen.dart';
import 'appointment/appointment_screen.dart'; 
import 'notification/notification_screen.dart'; 
import 'service/service_screen.dart'; // M√†n h√¨nh D·ªãch v·ª• (Index 2)

// Gi·∫£ ƒë·ªãnh Model Appointment ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a v√† c√≥ th·ªÉ import/s·ª≠ d·ª•ng
// N·∫øu Appointment ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a, b·∫°n c·∫ßn t·∫°o m·ªôt model Appointment.

// ------------------------------------------

class DashboardScreen extends StatefulWidget {
  final User user;
  const DashboardScreen({Key? key, required this.user}) : super(key: key);
  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  int _selectedIndex = 0;
  int _nextAppointmentId = 2;

  // 1. QU·∫¢N L√ù TR·∫†NG TH√ÅI L·ªäCH H·∫∏N
  List<Appointment> _appointments = [
    Appointment(
      id: 'appt1',
      doctorName: 'B√°c sƒ© Minh',
      specialty: 'Nhi khoa',
      date: '10/11/2025',
      time: '14:30 PM',
      status: 'upcoming',
    ),
  ];

  // üí• 2. QU·∫¢N L√ù TR·∫†NG TH√ÅI TH√îNG B√ÅO
  
  // 2. QU·∫¢N L√ù TR·∫†NG TH√ÅI TH√îNG B√ÅO
  List<AppNotification> _notifications = AppNotification.initialNotifications();

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // üí• 3. H√ÄM TH√äM TH√îNG B√ÅO (khi ƒë·∫∑t l·ªãch th√†nh c√¥ng)
  void _addNotificationForAppointment(Doctor doctor) {
    final newNotification = AppNotification(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: 'L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! üéâ',
      body:
          'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi B√°c sƒ© ${doctor.name}, chuy√™n khoa ${doctor.specialty} v√†o ng√†y 25/11/2025. Vui l√≤ng ki·ªÉm tra m·ª•c L·ªãch h·∫πn.',
      date: DateTime.now(),
      isRead: false,
    );

  // H√ÄM ƒê√ÅNH D·∫§U TH√îNG B√ÅO ƒê√É ƒê·ªåC
  void _markNotificationAsRead(String id) {
    setState(() {
      final index = _notifications.indexWhere((noti) => noti.id == id);
      if (index >= 0 && !_notifications[index].isRead) {
        _notifications[index] = _notifications[index].copyWith(isRead: true);
      }
    });

    // G·ªçi h√†m th√™m l·ªãch h·∫πn g·ªëc
    _addAppointment(doctor);
  }

  // H√ÄM G·ªêC TH√äM L·ªäCH H·∫∏N
  void _addAppointment(Doctor doctor) {
    final newAppointment = Appointment(
      id: 'appt${_nextAppointmentId++}',
      doctorName: doctor.name,
      specialty: doctor.specialty,
      date: '25/11/2025',
      time: '10:00 AM',
      status: 'upcoming',
    );

    setState(() {
      _appointments.add(newAppointment);
    });

    // Chuy·ªÉn sang tab L·ªãch h·∫πn (Index 1)
    _onItemTapped(1);
    _onItemTapped(1); // Chuy·ªÉn sang tab L·ªãch h·∫πn (Index 1)
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          '‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v·ªõi ${doctor.name} v√†o 25/11/2025',
        ),
      ),
    );
  }

  // H√ÄM TH√äM TH√îNG B√ÅO (khi ƒë·∫∑t l·ªãch th√†nh c√¥ng)
  void _addNotificationForAppointment(Doctor doctor) {
    final newNotification = AppNotification(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      title: 'L·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! üéâ',
      body: 'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m v·ªõi B√°c sƒ© ${doctor.name}, chuy√™n khoa ${doctor.specialty} v√†o ng√†y 25/11/2025. Vui l√≤ng ki·ªÉm tra m·ª•c L·ªãch h·∫πn.',
      date: DateTime.now(),
      isRead: false,
    );

    setState(() {
      _notifications.add(newNotification);
    });
    
    _addAppointment(doctor); 
  }

  // üí• 6. H√ÄM X√ìA V√Ä S·ª¨A L·ªäCH H·∫∏N (Gi·ªØ nguy√™n)
  
  void _deleteAppointment(Appointment appt) {
    setState(() {
      _appointments.removeWhere((a) => a.id == appt.id);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ƒê√£ h·ªßy l·ªãch h·∫πn v·ªõi ${appt.doctorName}')),
    );
  }

  void _editAppointment(Appointment appt) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('M·ªü form s·ª≠a l·ªãch h·∫πn: ${appt.doctorName}')),
    );
  }

  @override
  Widget build(BuildContext context) {
    final List<Widget> _screens = <Widget>[
      // HomeScreen g·ªçi h√†m th√™m th√¥ng b√°o khi ƒë·∫∑t l·ªãch
      HomeScreen(
        user: widget.user,
        onBookAppointment: _addNotificationForAppointment,
      ),

      // AppointmentScreen nh·∫≠n data v√† callbacks
    
    // Danh s√°ch 6 m√†n h√¨nh theo th·ª© t·ª±: [Trang ch·ªß, L·ªãch h·∫πn, D·ªãch v·ª•, Tin t·ª©c, Th√¥ng b√°o, H·ªì s∆°]
    final List<Widget> _screens = <Widget>[
      // 0. Trang Ch·ªß 
      // üí• S·ª¨A L·ªñI: C·∫¶N TRUY·ªÄN ƒê·ª¶ THAM S·ªê CHO HOMESCREEN M·ªöI
      HomeScreen(
        onBookAppointment: _addNotificationForAppointment, 
        notifications: _notifications,
        markNotificationAsRead: _markNotificationAsRead,
      ), 
      
      // 1. L·ªãch h·∫πn
      AppointmentScreen(
        appointments: _appointments,
        onDelete: _deleteAppointment,
        onEdit: _editAppointment,
        onBookAppointment:
            _addNotificationForAppointment, // V·∫´n d√πng h√†m th√™m th√¥ng b√°o
      ),
      NewsScreen(),

      // üí• NotificationScreen nh·∫≠n danh s√°ch v√† h√†m ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
      NotificationScreen(
        notifications: _notifications,
        markAsRead: _markNotificationAsRead,
        onBookAppointment: _addNotificationForAppointment, 
      ),
      
      // 2. D·ªãch v·ª• (S·ª≠ d·ª•ng ServiceScreen)
      ServiceScreen(
        onBookAppointment: _addNotificationForAppointment, 
        unreadNotifications: _notifications, 
        markNotificationAsRead: _markNotificationAsRead, 
      ),

      // 3. Tin t·ª©c
      const NewsScreen(),
    
      
      // 4. H·ªì s∆°
      const ProfileScreen(),
    ];

    return Scaffold(
      body: _screens[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Trang ch·ªß'),
          BottomNavigationBarItem(
            icon: Icon(Icons.calendar_today),
            label: 'L·ªãch h·∫πn',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'),
          BottomNavigationBarItem(
            icon: Icon(Icons.notifications),
            label: 'Th√¥ng b√°o',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'H·ªì s∆°'),
          // 6 m·ª•c trong Bottom Navigation Bar
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Trang ch·ªß'), 
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'L·ªãch h·∫πn'), 
          BottomNavigationBarItem(icon: Icon(Icons.medical_services), label: 'D·ªãch v·ª•'), 
          BottomNavigationBarItem(icon: Icon(Icons.article), label: 'Tin t·ª©c'), 
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'H·ªì s∆°'), 
        ],
      ),
    );
  }
}
