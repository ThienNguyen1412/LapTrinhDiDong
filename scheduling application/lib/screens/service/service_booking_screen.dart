// File: screens/service/service_booking_screen.dart

import 'package:flutter/material.dart';
import '../../models/health_package.dart';
import '../../models/notification.dart'; // üí• C·∫ßn import Notification Model
// üí• Th√™m import cho m√†n h√¨nh thanh to√°n m·ªõi
import 'service_payment_screen.dart'; 

class ServiceBookingScreen extends StatefulWidget {
final HealthPackage healthPackage;
  // üí• B·ªî SUNG: Th√™m callback ƒë·ªÉ truy·ªÅn xu·ªëng m√†n h√¨nh thanh to√°n
  final Function(AppNotification) addNotification; 

const ServiceBookingScreen({
super.key,
required this.healthPackage,
    required this.addNotification, // üí• B·∫Øt bu·ªôc ph·∫£i c√≥
});

@override
State<ServiceBookingScreen> createState() => _ServiceBookingScreenState();
}

class _ServiceBookingScreenState extends State<ServiceBookingScreen> {
// Key ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa Form
final _formKey = GlobalKey<FormState>();

// Controllers cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
final TextEditingController _nameController = TextEditingController();
final TextEditingController _phoneController = TextEditingController();
final TextEditingController _noteController = TextEditingController();

// State cho Ng√†y/Gi·ªù Kh√°m
DateTime? _selectedDate;
TimeOfDay? _selectedTime;

// H√†m ch·ªçn ng√†y
Future<void> _selectDate(BuildContext context) async {
final DateTime? picked = await showDatePicker(
context: context,
initialDate: DateTime.now(),
firstDate: DateTime.now(),
lastDate: DateTime.now().add(const Duration(days: 365)),
);
if (picked != null && picked != _selectedDate) {
setState(() {
_selectedDate = picked;
});
}
}

// H√†m ch·ªçn gi·ªù
Future<void> _selectTime(BuildContext context) async {
final TimeOfDay? picked = await showTimePicker(
context: context,
initialTime: TimeOfDay.now(),
);
if (picked != null && picked != _selectedTime) {
setState(() {
_selectedTime = picked;
});
}
}

// üí• C·∫¨P NH·∫¨T: H√†m x·ª≠ l√Ω chuy·ªÉn sang trang thanh to√°n
void _submitBooking() {
// K√≠ch ho·∫°t validation cho TextFormField
bool formValid = _formKey.currentState!.validate();

// Ki·ªÉm tra validation th·ªß c√¥ng cho Date/Time
bool dateValid = _selectedDate != null;
bool timeValid = _selectedTime != null;

// N·∫øu Form v√† Date/Time ƒë·ªÅu h·ª£p l·ªá
if (formValid && dateValid && timeValid) {
// 1. Thu th·∫≠p th√¥ng tin kh√°ch h√†ng
final bookingInfo = {
'name': _nameController.text,
'phone': _phoneController.text,
'date': _selectedDate,
'time': _selectedTime,
'note': _noteController.text,
};

// 2. ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh thanh to√°n
Navigator.push(
context,
MaterialPageRoute(
builder: (ctx) => ServicePaymentScreen(
healthPackage: widget.healthPackage,
bookingInfo: bookingInfo,
            // üí• B·ªî SUNG: Truy·ªÅn callback xu·ªëng m√†n h√¨nh thanh to√°n
            addNotification: widget.addNotification,
),
),
);
} else {
// N·∫øu c√≥ l·ªói ·ªü Date/Time, k√≠ch ho·∫°t rebuild ƒë·ªÉ hi·ªÉn th·ªã l·ªói validation th·ªß c√¥ng
setState(() {}); 
ScaffoldMessenger.of(context).showSnackBar(
const SnackBar(
content: Text('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc v√† ch·ªçn ng√†y/gi·ªù kh√°m.'),
backgroundColor: Colors.red,
),
);
}
}

@override
void dispose() {
_nameController.dispose();
_phoneController.dispose();
_noteController.dispose();
super.dispose();
}

@override
Widget build(BuildContext context) {
String formattedDate = _selectedDate == null 
? 'Ch·ªçn Ng√†y Kh√°m' 
: '${_selectedDate!.day}/${_selectedDate!.month}/${_selectedDate!.year}';

String formattedTime = _selectedTime == null 
? 'Ch·ªçn Gi·ªù Kh√°m' 
: _selectedTime!.format(context);

return Scaffold(
appBar: AppBar(
title: const Text('B∆∞·ªõc 1/2: ƒêi·ªÅn Th√¥ng Tin'), // C·∫≠p nh·∫≠t title
backgroundColor: Colors.blue,
foregroundColor: Colors.white,
),
body: SingleChildScrollView(
padding: const EdgeInsets.all(20.0),
child: Form(
key: _formKey,
child: Column(
crossAxisAlignment: CrossAxisAlignment.start,
children: <Widget>[
// T√™n G√≥i D·ªãch V·ª•
Text(
'G√≥i: ${widget.healthPackage.name}',
style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.blue),
),
const Divider(height: 30),

// 1. H·ªç T√™n
_buildTextFormField(
controller: _nameController,
labelText: 'H·ªç v√† T√™n (*)',
icon: Icons.person,
validator: (value) {
if (value == null || value.isEmpty) {
return 'Vui l√≤ng nh·∫≠p H·ªç v√† T√™n';
}
return null;
},
),
const SizedBox(height: 15),

// 2. S·ªë ƒêi·ªán Tho·∫°i
_buildTextFormField(
controller: _phoneController,
labelText: 'S·ªë ƒêi·ªán Tho·∫°i (*)',
icon: Icons.phone,
keyboardType: TextInputType.phone,
validator: (value) {
if (value == null || value.isEmpty) {
return 'Vui l√≤ng nh·∫≠p S·ªë ƒëi·ªán tho·∫°i';
}
// Th√™m logic ki·ªÉm tra ƒë·ªãnh d·∫°ng SƒêT n·∫øu c·∫ßn
if (value.length < 10 || value.length > 11) {
return 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
}
return null;
},
),
const SizedBox(height: 20),

// 3. Ng√†y Kh√°m
const Text(
'Ng√†y Kh√°m (*)',
style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500, color: Colors.black87),
),
const SizedBox(height: 5),
_buildDateOrTimeButton(
text: formattedDate,
icon: Icons.calendar_today,
onPressed: () => _selectDate(context),
validator: () => _selectedDate == null ? 'Vui l√≤ng ch·ªçn ng√†y kh√°m' : null,
),
const SizedBox(height: 15),

// 4. Gi·ªù Kh√°m
const Text(
'Gi·ªù Kh√°m (*)',
style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500, color: Colors.black87),
),
const SizedBox(height: 5),
_buildDateOrTimeButton(
text: formattedTime,
icon: Icons.access_time,
onPressed: () => _selectTime(context),
validator: () => _selectedTime == null ? 'Vui l√≤ng ch·ªçn gi·ªù kh√°m' : null,
),
const SizedBox(height: 20),

// 5. Ghi Ch√∫
_buildTextFormField(
controller: _noteController,
labelText: 'Ghi Ch√∫ (T√πy ch·ªçn)',
icon: Icons.notes,
maxLines: 4,
),
const SizedBox(height: 30),

// N√∫t TI·∫æP THEO
ElevatedButton(
onPressed: _submitBooking,
style: ElevatedButton.styleFrom(
backgroundColor: Colors.blue.shade600, // Thay ƒë·ªïi m√†u s·∫Øc v√† t√™n n√∫t
foregroundColor: Colors.white,
minimumSize: const Size(double.infinity, 55),
shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
),
child: const Text('TI·∫æP THEO', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
),
],
),
),
),
);
}

// Widget chung cho TextFormField (Gi·ªØ nguy√™n)
Widget _buildTextFormField({
required TextEditingController controller,
required String labelText,
required IconData icon,
TextInputType keyboardType = TextInputType.text,
String? Function(String?)? validator,
int maxLines = 1,
}) {
    // ... (logic gi·ªØ nguy√™n)
return TextFormField(
controller: controller,
keyboardType: keyboardType,
maxLines: maxLines,
validator: validator,
decoration: InputDecoration(
labelText: labelText,
prefixIcon: Icon(icon, color: Colors.blue),
border: OutlineInputBorder(
borderRadius: BorderRadius.circular(10),
),
enabledBorder: OutlineInputBorder(
borderRadius: BorderRadius.circular(10),
borderSide: BorderSide(color: Colors.blue.shade200, width: 1),
),
focusedBorder: OutlineInputBorder(
borderRadius: BorderRadius.circular(10),
borderSide: const BorderSide(color: Colors.blue, width: 2),
),
),
);
}

// Widget chung cho n√∫t ch·ªçn Ng√†y/Gi·ªù (Gi·ªØ nguy√™n)
Widget _buildDateOrTimeButton({
required String text,
required IconData icon,
required VoidCallback onPressed,
required String? Function() validator,
}) {
// ... (logic gi·ªØ nguy√™n)
return Column(
crossAxisAlignment: CrossAxisAlignment.start,
children: [
InkWell(
onTap: onPressed,
child: Container(
height: 55,
padding: const EdgeInsets.symmetric(horizontal: 12),
decoration: BoxDecoration(
border: Border.all(color: Colors.blue.shade200, width: 1),
borderRadius: BorderRadius.circular(10),
),
child: Row(
children: [
Icon(icon, color: Colors.blue),
const SizedBox(width: 15),
Text(
text,
style: TextStyle(
fontSize: 16,
color: (text == 'Ch·ªçn Ng√†y Kh√°m' || text == 'Ch·ªçn Gi·ªù Kh√°m') ? Colors.grey : Colors.black,
),
),
const Spacer(),
const Icon(Icons.edit, size: 20, color: Colors.blue),
],
),
),
),
// Hi·ªÉn th·ªã l·ªói th·ªß c√¥ng cho Date/Time Picker
if (validator() != null && (_formKey.currentState?.validate() == false || (text == 'Ch·ªçn Ng√†y Kh√°m' && _selectedDate == null) || (text == 'Ch·ªçn Gi·ªù Kh√°m' && _selectedTime == null)))
Padding(
padding: const EdgeInsets.only(top: 8.0, left: 12.0),
child: Text(
validator()!,
style: TextStyle(color: Theme.of(context).colorScheme.error, fontSize: 12),
),
),
],
);
}
}